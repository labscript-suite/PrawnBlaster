
;#######################################################################
;#                                                                     #
;# pseudoclock.pio                                                     #
;#                                                                     #
;# Copyright 2021, Philip Starkey                                      #
;#                                                                     #
;#                                                                     #
;# This file is used to flash a Raspberry Pi Pico microcontroller      #
;# prototyping board to create a PrawnBlaster (see readme.txt and      #
;# http://hardware.labscriptsuite.org).                                #
;# This file is licensed under the 3-clause BSD License.               #
;# See the license.txt file for the full license.                      #
;#                                                                     #
;#######################################################################



.program pseudoclock
.side_set 1 opt

; Note: We currently have indefinite waits added due to a quirk of how we jump from a wait (should a wait be followed by another wait)
;       However, this could be removed if we change the jump to "start" to a jump to "newinst". Then we would not have indefinite waits
;       but would not have the quirk of an indefinite wait reporting a non-timeout value for the first wait (see FAQ in readme).

start:
    ; Pull reps into OSR (blocking)
    pull block

    ;
    ; Start program and go high
    ;
    mov y, osr                          ; Move reps into Y
    jmp !y indefinitewait               ; If reps is 0 for the first instruction, jump to wait/end block. This should maybe be updated to
                                        ; jump to indefinitewait instead if we can fit that block of code in...
    jmp shortstart

indefinitewait:
    pull block                          ; read out half period for this instruction - but ignore it! We do this before waiting
                                        ; so that we don't risk draining the FIFO. This is also necessary for the case where we have
                                        ; two waits in a row (an indefinite wait) as we might end up here mid experiment!
    wait 1 pin 0            [2]         ; indefinitely wait for initial trigger (usually skipped by above jump). Delay by 2 cycles after condition reached
                                        ; so that the length of this path matches the length of the resume from wait path
    jmp start                           ; Must load in new value for reps and load in half period

; This allows us to skip the above mov/wait check if we already did it as part of "newinst" below
shortstart:
.wrap_target
    jmp y-- shortstart2 side 1          ; go high, and decrement y (since it only decrements post jump check). This will always jump
                                        ; since we just checked if it was 0 in the previous jump.
shortstart2:
    
    pull block                          ; pull half period into OSR
; This label skips loading in a new half period when we are just doing another rep of the previous half period
mainloop:
    mov x, osr                          ; (Re)load half period into X 
highloop:
    jmp x-- highloop                    ; Jump if not 0. Decrement half period regardless. This loops for X clock cycles

    ;
    ; Reload half period into X and drop to low
    ;
    mov x, osr
lowloop:
    
    jmp x-- lowloop      side 0         ; Jump if not 0. Decrement half period regardless. This loops for X clock cycles
    
    jmp y-- continuereps                ; Jump to normal path if there are still more reps to do (decrement regardless)
                                        ; If we are out of reps, do the unusual path for a new instruction
newinst:
    pull block                          ; Pull next reps into OSR
    mov y, osr                          ; and transfer to Y
    jmp !y waitstart                    ; If reps is 0, jump to wait/end block
    .wrap                               ; else wrap

;
; Normal path when we still have more reps to do
;
continuereps:
    nop                     [2]         ; nop[2] means a nop + 2 delay cycles == 3 nops
    ;nop
    ;nop
   
    nop             side 1              ; Go high and jump to point where we reload the half period
    jmp mainloop

;
; Wait code (reps already loaded in Y and == 0)
;
waitstart:
    pull block                          ; Load in half period
    mov x, osr                          ; and place in X
    
    jmp !x stop                         ; if half period is also 0, then stop
                                        ; otherwise go to the wait loop (half period contains number loops to wait)
waitloop:                       
    jmp pin waitdone                    ; Check if input trigger is high and jump if true
    jmp x-- waitloop                    ; Continue looping if not 0. Decrement wait loop counter "x" regardless 

waitdone:
    mov isr, x                          ; put X (the remaining number of wait loop cycles) in ISR as a measure of how long the wait was
    
    

    push noblock                        ; send count to main program as length of wait (0 implies timeout)
                                        ; The length of the wait is determined by the original timeout sent, minus
                                        ; the value returned here, all times 2 times the clock cycle length
    
    jmp start                           ; jump to start to resume


; Stop code
stop:
    mov isr, x                           ; push something to the FIFO so we know we are done
    push block                           ; Since this is not time critical, we can block here getting us an extra wait length stored in the FIFO
end:
    jmp end                              ; end forever to prevent wrapping to .wrap_target and setting output pin high

% c-sdk {
#include "hardware/gpio.h"
static inline void pio_pseudoclock_init(PIO pio, uint sm, uint offset, uint out_pin, uint in_pin) {
    pio_sm_config c = pseudoclock_program_get_default_config(offset);

    // Configure pseudoclock output pin and set as the sideset pin
    pio_sm_set_consecutive_pindirs(pio, sm, out_pin, 1, true);
    pio_gpio_init(pio, out_pin);
    sm_config_set_sideset_pins(&c, out_pin);

    // Configure wait trigger resume pin and set as the jmp pin
    pio_sm_set_consecutive_pindirs(pio, sm, in_pin, 1, false);
    pio_gpio_init(pio, in_pin);
    sm_config_set_jmp_pin(&c, in_pin); 
    sm_config_set_in_pins(&c, in_pin);

    // TODO: Configure clock frequency

    // Configure PIO state machine
    pio_sm_init(pio, sm, offset, &c);
    
    // We'll defer this until we've put data in the FIFO
    //pio_sm_set_enabled(pio, sm, true);

}
%}
